"use client";

import { useEffect, useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { LogoutButton } from "@/components/admin/LogoutButton";
import { useRef } from "react"; //
type UploadInfo = {
  namespace?: string;
  status: "idle" | "processing" | "ready" | "error";
  fileName?: string;
  pages?: number;
  chunks?: number;
  user?: { name?: string; email?: string; image?: string };
};

// app/admin/page.tsx
type Toast = { type: "success" | "error"; msg: string } | null;

export default function AdminPage() {
  const [info, setInfo] = useState<UploadInfo>({ status: "idle" });
  const [shareLink, setShareLink] = useState("");
  const [busy, setBusy] = useState(false);
  const [copied, setCopied] = useState(false);
  const [toast, setToast] = useState<Toast>(null);
  const isProcessing = info.status === "processing";
  const canGenerate = info.status === "ready" && !busy;

  const hasAutogenerated = useRef(false);

  useEffect(() => {
    // Auto-generate share link when indexing completes
    if (
      info.status === "ready" &&
      !shareLink &&
      !busy &&
      !hasAutogenerated.current
    ) {
      hasAutogenerated.current = true;
      generateShareLink().then(() => {
        // optional: toast
        setToast({ type: "success", msg: "Share link is ready!" });
        setTimeout(() => setToast(null), 1500);
      });
    }
  }, [info.status, shareLink, busy]);
  // ---- data ----
  async function fetchStatus() {
    const res = await fetch("/api/admin/status", { cache: "no-store" });
    if (!res.ok) return;
    const data = (await res.json()) as UploadInfo;
    setInfo((prev) => ({ ...prev, ...data }));
  }

  // ---- upload ----
  async function handleUpload(e: React.FormEvent<HTMLFormElement>) {
    e.preventDefault();
    const fd = new FormData(e.currentTarget);
    setBusy(true);
    setShareLink("");
    setCopied(false);

    const res = await fetch("/api/upload", { method: "POST", body: fd });
    setBusy(false);
    if (!res.ok) {
      setInfo((prev) => ({ ...prev, status: "error" }));
      return;
    }
    // flip to processing; polling will advance to ready
    setInfo((prev) => ({ ...prev, status: "processing" }));
  }

  // ---- share link ----
  async function generateShareLink() {
    try {
      setBusy(true);
      setCopied(false);
      const res = await fetch("/api/admin/share-link", {
        method: "GET",
        cache: "no-store",
      });
      if (!res.ok) {
        const t = await res.text();
        console.error("[share-link] server error:", t);
        alert("Failed to generate link.");
        return;
      }
      const data = await res.json();
      setShareLink(data.url || "");
    } finally {
      setBusy(false);
    }
  }
  function copyLink() {
    if (!shareLink) return;
    navigator.clipboard.writeText(shareLink);
    setCopied(true);
    setTimeout(() => setCopied(false), 1500);
  }
  function openLiveDemo() {
    if (!shareLink) return;
    window.open(shareLink, "_blank", "noopener,noreferrer");
  }

  // ---- effects ----
  useEffect(() => {
    fetchStatus();
  }, []);
  useEffect(() => {
    if (info.status === "processing") {
      const t = setInterval(fetchStatus, 2000);
      return () => clearInterval(t);
    }
  }, [info.status]);

  return (
    <main className="mx-auto max-w-3xl p-6 space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <h1 className="text-2xl font-semibold tracking-tight">Admin Dashboard</h1>
        <StatusBadge status={info.status} />
      </div>

      {/* Admin Info */}
      <Card>
        <CardHeader className="flex flex-row items-center justify-between space-y-0">
          <CardTitle>Admin</CardTitle>
          {info.user?.image ? (
            // eslint-disable-next-line @next/next/no-img-element
            <img
              src={info.user.image}
              alt="avatar"
              className="h-9 w-9 rounded-full border object-cover"
            />
          ) : null}
        </CardHeader>
        <CardContent className="text-sm text-muted-foreground space-y-1">
          <p>
            <span className="font-medium text-foreground">Name:</span>{" "}
            {info.user?.name || "—"}
          </p>
          <p>
            <span className="font-medium text-foreground">Email:</span>{" "}
            {info.user?.email || "—"}
          </p>
          <p className="truncate">
            <span className="font-medium text-foreground">Namespace:</span>{" "}
            <code className="text-xs">{info.namespace || "—"}</code>
          </p>
        </CardContent>
      </Card>

      {/* Venue Brochure */}
      <Card>
        <CardHeader>
          <CardTitle>Venue Brochure</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <form onSubmit={handleUpload} className="flex items-center gap-2">
            <Input
              type="file"
              name="file"
              accept="application/pdf"
              required
              disabled={isProcessing || busy}
            />
           <Button disabled={busy || isProcessing}>
  {isProcessing ? "Processing…" : busy ? "Working…" : "Upload / Replace"}
</Button>
          </form>

          <div className="grid grid-cols-2 gap-3 text-sm">
            <Field label="File" value={info.fileName || "—"} />
            <Field label="Pages" value={info.pages ?? "—"} />
            <Field label="Chunks" value={info.chunks ?? "—"} />
            <Field label="Status" value={<StatusBadge status={info.status} inline />} />
          </div>
          <div className="flex items-center gap-2">
            <Button
              type="button"
              variant="outline"
              onClick={async () => {
                try {
                  const r = await fetch("/api/admin/preview-url", { cache: "no-store" });
                  if (!r.ok) throw new Error("Failed to load preview");
                  const { url } = await r.json();
                  window.open(url, "_blank", "noopener,noreferrer");
                } catch {
                  setToast({ type: "error", msg: "Could not open preview." });
                  setTimeout(() => setToast(null), 1200);
                }
              }}
              disabled={info.status !== "ready" || busy}
            >
              Preview PDF
            </Button>
            <span className="text-xs text-muted-foreground">
              {info.status === "ready" ? "You can preview your brochure." : "Preview is available when Ready."}
            </span>
          </div>
        </CardContent>
      </Card>

      {/* Share Link */}
      <Card>
        <CardHeader>
          <CardTitle>Share Link</CardTitle>
        </CardHeader>
        <CardContent className="space-y-3">
          {shareLink ? (
            <div className="flex items-center gap-2">
              <Input value={shareLink} readOnly />
              <Button type="button" variant="outline" onClick={copyLink} disabled={busy}>
                {copied ? "Copied!" : "Copy"}
              </Button>
              <Button type="button" onClick={openLiveDemo} disabled={busy}>
                Live demo
              </Button>
              <Button
                type="button"
                variant="ghost"
                onClick={generateShareLink}
                disabled={!canGenerate}
                title="Regenerate link"
              >
                Generate new
              </Button>
              <LogoutButton />
            </div>
          ) : (
            <div className="flex items-center gap-2">
              <Input placeholder="Generate a link…" readOnly />
              <Button
                type="button"
                onClick={generateShareLink}
                disabled={!canGenerate}
                title={info.status !== "ready" ? "Upload must be Ready" : ""}
              >
                Generate link
              </Button>
              <LogoutButton />
            </div>
          )}

          {info.status !== "ready" && (
            <p className="text-xs text-muted-foreground">
              Upload and wait until status is{" "}
              <span className="font-medium text-green-600">Ready</span> to generate a shareable link.
            </p>
          )}
        </CardContent>
      </Card>

      {toast && (
        <div className={`fixed bottom-5 right-5 px-4 py-2 rounded-md shadow-lg text-sm
    ${toast.type === "success" ? "bg-green-600 text-white" : "bg-red-600 text-white"}`}>
          {toast.msg}
        </div>
      )}

    </main>
  );
}

/* ---------- tiny UI helpers ---------- */

function Field({ label, value }: { label: string; value: React.ReactNode }) {
  return (
    <div className="rounded-md border p-3">
      <div className="text-[11px] uppercase tracking-wide text-muted-foreground">{label}</div>
      <div className="mt-1 text-sm">{value}</div>
    </div>
  );
}

function StatusBadge({ status, inline }: { status: "idle" | "processing" | "ready" | "error"; inline?: boolean }) {
  const map = {
    idle: "bg-muted text-foreground",
    processing: "bg-yellow-100 text-yellow-900 border border-yellow-300",
    ready: "bg-green-100 text-green-900 border border-green-300",
    error: "bg-red-100 text-red-900 border border-red-300",
  } as const;
  const dot = {
    idle: "bg-muted-foreground/60",
    processing: "bg-yellow-500",
    ready: "bg-green-600",
    error: "bg-red-600",
  } as const;
  return (
    <span className={`inline-flex items-center gap-2 rounded-full px-2.5 py-1 text-xs font-medium ${map[status]} ${inline ? "" : "shadow-sm"}`}>
      <span className={`h-2 w-2 rounded-full ${dot[status]}`} />
      {status === "idle" && "Idle"}
      {status === "processing" && "Processing…"}
      {status === "ready" && "Ready"}
      {status === "error" && "Error"}
    </span>
  );
}
